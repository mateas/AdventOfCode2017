package se.sjolinder.advent21;

import java.util.HashMap;
import java.util.Map;

public class BitArt {
    public static void main(String[] args) {
        String input = "../.. => .##/.##/###\n" +
                "#./.. => .../#.#/###\n" +
                "##/.. => .##/.../.#.\n" +
                ".#/#. => ###/.#./##.\n" +
                "##/#. => .#./#../#.#\n" +
                "##/## => .##/#.#/###\n" +
                ".../.../... => ####/.##./####/.#..\n" +
                "#../.../... => ..../..##/#.../.##.\n" +
                ".#./.../... => #.#./##.#/#.../#.#.\n" +
                "##./.../... => .#../.##./#.../....\n" +
                "#.#/.../... => ###./..##/..##/##.#\n" +
                "###/.../... => .###/#.##/..../....\n" +
                ".#./#../... => ##.#/#..#/.##./...#\n" +
                "##./#../... => ..../#..#/#.#./...#\n" +
                "..#/#../... => #.##/.#../.#.#/###.\n" +
                "#.#/#../... => ##../.#.#/...#/...#\n" +
                ".##/#../... => ##.#/.##./..#./##.#\n" +
                "###/#../... => ...#/####/..#./#...\n" +
                ".../.#./... => ##.#/#.#./..##/.##.\n" +
                "#../.#./... => .#.#/#.##/.##./....\n" +
                ".#./.#./... => #..#/#.../.##./....\n" +
                "##./.#./... => ###./###./..##/#..#\n" +
                "#.#/.#./... => .###/...#/###./###.\n" +
                "###/.#./... => ...#/..##/..#./#.##\n" +
                ".#./##./... => .##./.#../...#/..#.\n" +
                "##./##./... => .###/..#./.###/###.\n" +
                "..#/##./... => .#.#/..#./..#./...#\n" +
                "#.#/##./... => .#.#/##../#.../.##.\n" +
                ".##/##./... => .##./...#/#.##/###.\n" +
                "###/##./... => ...#/###./####/#.##\n" +
                ".../#.#/... => #.#./#.../#.#./..#.\n" +
                "#../#.#/... => ###./##../..#./.#..\n" +
                ".#./#.#/... => #.../..##/#..#/#.#.\n" +
                "##./#.#/... => #.#./.##./#..#/##.#\n" +
                "#.#/#.#/... => #.##/.#.#/#..#/.#.#\n" +
                "###/#.#/... => #.../##.#/###./....\n" +
                ".../###/... => ..##/...#/##.#/###.\n" +
                "#../###/... => .#.#/...#/#.##/.#..\n" +
                ".#./###/... => ####/#.../..#./.#.#\n" +
                "##./###/... => ..../####/#.##/#..#\n" +
                "#.#/###/... => ####/..#./####/.#.#\n" +
                "###/###/... => ..##/..../...#/.#..\n" +
                "..#/.../#.. => .###/..##/.#.#/.##.\n" +
                "#.#/.../#.. => #.##/#..#/.#.#/##.#\n" +
                ".##/.../#.. => #.##/####/.#.#/..#.\n" +
                "###/.../#.. => ##../##.#/..../##..\n" +
                ".##/#../#.. => ...#/####/..##/.##.\n" +
                "###/#../#.. => ..#./...#/#.../##.#\n" +
                "..#/.#./#.. => #..#/##.#/..##/#..#\n" +
                "#.#/.#./#.. => ..../.###/#..#/..##\n" +
                ".##/.#./#.. => ..#./...#/..##/...#\n" +
                "###/.#./#.. => ...#/..../##.#/....\n" +
                ".##/##./#.. => .#../..##/...#/.#.#\n" +
                "###/##./#.. => .###/#.#./####/#.#.\n" +
                "#../..#/#.. => .###/##.#/##../##..\n" +
                ".#./..#/#.. => ##../.#../###./##.#\n" +
                "##./..#/#.. => #..#/####/####/..##\n" +
                "#.#/..#/#.. => ..##/..../###./..##\n" +
                ".##/..#/#.. => ..##/.#.#/.#../.#..\n" +
                "###/..#/#.. => ...#/.###/.###/.#.#\n" +
                "#../#.#/#.. => ##../##../##.#/.##.\n" +
                ".#./#.#/#.. => ...#/.##./.#.#/#...\n" +
                "##./#.#/#.. => .##./.#../.#../#...\n" +
                "..#/#.#/#.. => ..##/##.#/####/###.\n" +
                "#.#/#.#/#.. => ..../.###/#.../#..#\n" +
                ".##/#.#/#.. => ..#./#.#./.#../...#\n" +
                "###/#.#/#.. => ##.#/#.../##.#/.##.\n" +
                "#../.##/#.. => ..../#.../..#./####\n" +
                ".#./.##/#.. => #..#/.#../#.#./..##\n" +
                "##./.##/#.. => .###/..##/###./....\n" +
                "#.#/.##/#.. => .###/.##./.###/#.##\n" +
                ".##/.##/#.. => #.##/###./.##./...#\n" +
                "###/.##/#.. => ...#/#.##/.##./#.#.\n" +
                "#../###/#.. => #..#/.###/.###/#.#.\n" +
                ".#./###/#.. => ..#./#.#./..../...#\n" +
                "##./###/#.. => ..##/##../#..#/....\n" +
                "..#/###/#.. => ..##/.#../.#../###.\n" +
                "#.#/###/#.. => ..#./.###/..../...#\n" +
                ".##/###/#.. => .##./###./#.../#.##\n" +
                "###/###/#.. => ##.#/..../.##./##.#\n" +
                ".#./#.#/.#. => .##./.#.#/####/....\n" +
                "##./#.#/.#. => ##.#/#.##/####/.#..\n" +
                "#.#/#.#/.#. => ####/.##./##.#/...#\n" +
                "###/#.#/.#. => #..#/#.##/.##./###.\n" +
                ".#./###/.#. => .#../..../.##./##.#\n" +
                "##./###/.#. => ##.#/.#../#.../.###\n" +
                "#.#/###/.#. => ###./###./.#../###.\n" +
                "###/###/.#. => #..#/#.../#..#/.#.#\n" +
                "#.#/..#/##. => #..#/#.../##../###.\n" +
                "###/..#/##. => #.../.#../.###/#...\n" +
                ".##/#.#/##. => .#.#/.##./.#../##.#\n" +
                "###/#.#/##. => #.../..../##../.###\n" +
                "#.#/.##/##. => .#.#/##../.###/#.#.\n" +
                "###/.##/##. => ###./..#./##.#/.###\n" +
                ".##/###/##. => ..#./.#.#/##.#/#.#.\n" +
                "###/###/##. => ##../.#.#/#..#/.#.#\n" +
                "#.#/.../#.# => ##../###./..#./##.#\n" +
                "###/.../#.# => .#../##../..#./##.#\n" +
                "###/#../#.# => ###./#..#/####/....\n" +
                "#.#/.#./#.# => .###/..../.###/##.#\n" +
                "###/.#./#.# => ###./.###/..##/.#.#\n" +
                "###/##./#.# => ..#./..##/#..#/#.##\n" +
                "#.#/#.#/#.# => .#.#/.#../.#.#/#.##\n" +
                "###/#.#/#.# => .###/#.../##../.###\n" +
                "#.#/###/#.# => .#../...#/..../...#\n" +
                "###/###/#.# => #..#/##.#/..#./#...\n" +
                "###/#.#/### => .###/.#.#/..#./####\n" +
                "###/###/### => ##.#/..##/.#../..##";
        System.err.println("Advent21: part 1: " + part1(input, 5));
        System.err.println("Advent21: part 1: " + part1(input, 18));

    }

    public static int part1(String input, int iterations) {
        String[] inputRows = input.split(System.getProperty("line.separator"));
        HashMap<Matrix, Matrix> rules = new HashMap<>();

        for (int i = 0; i < inputRows.length; i++) {
            String[] split = inputRows[i].split(" => ");
            rules.put(Matrix.parsString(split[0]), Matrix.parsString(split[1]));
        }
        Matrix<Integer> matrix = getStart();

        for (int i = 0; i < iterations; i++) {


            int dividend = 0;
            if (matrix.size() % 2 == 0) {
                dividend = 2;
            } else if (matrix.size() % 3 == 0) {
                dividend = 3;
            } else
                break;
            Matrix<Integer> newMatrix = new Matrix<>();
            for (int j = 0; j < matrix.size() / dividend; j++) {
                Matrix<Integer> newMatrixRow = new Matrix<>();

                for (int k = 0; k < matrix.size() / dividend; k++) {
                    Matrix subMatrix = matrix.subMatrix(j, k, dividend);
                    boolean foundARule = false;
                    for (Map.Entry<Matrix, Matrix> rule : rules.entrySet()) {

                        Matrix ruleKey = rule.getKey().clone();
                        if (subMatrix.size() == ruleKey.size()) {
                            while (ruleKey.stillFlop()) {
                                if (ruleKey.flop().equals(subMatrix)) {
                                    //Found a match
                                    //convert matrix!!!
                                    newMatrixRow.addCells(rule.getValue().clone());
                                    foundARule = true;
                                    break;
                                }
                            }
                            if (foundARule)
                                break;
                        }
                    }
                }
                newMatrix.addRows(newMatrixRow);
            }
            matrix = newMatrix;
        }

        int count = 0;
        for (int i = 0; i < matrix.rows.size(); i++) {
            for (int j = 0; j < matrix.rows.get(0).size(); j++) {
                count += matrix.rows.get(i).get(j);
            }
        }
        return count;
    }

    public static Matrix getStart() {
        Matrix matrix = Matrix.parsString(".#./..#/###");
        return matrix;
    }
}
